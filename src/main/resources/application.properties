#Spring DataSource drajver koji ?e se koristiti za komunikaciju aplikacije sa bazom
spring.datasource.driverClassName=org.postgresql.Driver

#Navodi se baza koja se koristi
spring.datasource.platform=postgres

#Navodi se URL do baze koja je pokrenuta u lokalu na podrazumevanom portu 5432 i na serveru je kreirana ?ema baze pod nazivom "jpa"
#https://www.pgadmin.org/docs/pgadmin4/4.14/schema_dialog.html (ako koristimo Hibernate za kreiranje tabela, SQL deo sa linka nije potreban)
spring.datasource.url=jdbc:postgresql://localhost:5432/isa

#Navode se kredencijali za konekciju na server baze
spring.datasource.username=postgres
spring.datasource.password=super

#Umesto da sami pi?emo SQL skriptu za kreiranje tabela u bazi, Hibernate kreira tabele na osnovu anotacija @Entity i kada aplikacija zavrsi sa radom dropuje ih (create-drop)
#https://www.baeldung.com/spring-boot-data-sql-and-schema-sql
#Ako ?elimo sami da kreiramo skriptu za kreiranje tabela potrebno je u src/main/resources folderu kreirati i popuniti fajl pod nazivom schema.sql koji ?e Spring Boot automatski pokrenuti pri pokretanju aplikacije
spring.jpa.hibernate.ddl-auto = update

#Hibernate SQL upiti se ispisuju na IDE konzoli
spring.jpa.show-sql = true

#formatira ispis SQL upita koje Hibernate pravi ka bazi na IDE konzoli
spring.jpa.properties.hibernate.format_sql=true

#https://docs.spring.io/spring-boot/docs/2.1.0.M1/reference/html/howto-database-initialization.html#howto-initialize-a-database-using-spring-jdbc
spring.datasource.initialization-mode=never
# Spring Boot ?e automatski tra?iti SQL skripte u src/main/resources direktorijumu
# Preporu?uje se da se koristi samo ove dve opcije (schema.sql i data.sql) za inicijalizaciju podataka
#spring.datasource.schema=classpath:schema.sql
spring.datasource.data=classpath:data-postgres.sql

#https://stackoverflow.com/questions/43905119/postgres-error-method-org-postgresql-jdbc-pgconnection-createclob-is-not-imple
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#Hibernate optimizacija SQL upita za Postgres bazu
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL95Dialect

#https://vladmihalcea.com/the-open-session-in-view-anti-pattern/
spring.jpa.open-in-view=false

# Onemogucava automatsku konfiguraciju Spring Security-ja kako bi aplikacija privremeno radila bez autentifikacije
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=predmetisa@gmail.com
spring.mail.password=jkutsthjwisfjgeb
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# da bi slike bile dostupne klijentu preko urla
spring.web.resources.static-locations=classpath:/static/

# RATE LIMITER
resilience4j.ratelimiter.instances.follow-limit.limitForPeriod=50
resilience4j.ratelimiter.instances.follow-limit.limitRefreshPeriod=1m
resilience4j.ratelimiter.instances.follow-limit.timeoutDuration=0

resilience4j.ratelimiter.instances.unfollow-limit.limitForPeriod=50
resilience4j.ratelimiter.instances.unfollow-limit.limitRefreshPeriod=1m
resilience4j.ratelimiter.instances.unfollow-limit.timeoutDuration=0

resilience4j.ratelimiter.instances.comment-limit.limitForPeriod=60
resilience4j.ratelimiter.instances.comment-limit.limitRefreshPeriod=1h
resilience4j.ratelimiter.instances.comment-limit.timeoutDuration=0

# Defini?ite tip ke?a
spring.cache.type=simple

# Defini?ite imena ke?ova
spring.cache.cache-names=postsCache, usersCache


#RabbitMQ queue
myqueue=spring-boot1

myqueue2=spring-boot2
routingkey=spring-boot2
myexchange=myexchange

#Pracenje aktivnosti
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
management.metrics.web.server.request.autotime.enabled=true

onlybuns.upload.path=C:/onlybuns-uploads/images/





server.port=8080

spring.amqp.deserialization.trust.all=true